#include <Arduino.h>

const int NUM_SENSORS = 11;
const int sensorPins[NUM_SENSORS] = {13, 14, 27, 26, 25, 32, 34, 39, 36, 15, 4};

int sensorMin[NUM_SENSORS];
int sensorMax[NUM_SENSORS];
int sensors_threshold[NUM_SENSORS];
bool states[NUM_SENSORS] = {false};

#define LEFT_PWM_PIN    23
#define LEFT_IN1        18
#define LEFT_IN2        22
#define RIGHT_PWM_PIN   21
#define RIGHT_IN1       16
#define RIGHT_IN2       19

#define LEFT_CHANNEL    0
#define RIGHT_CHANNEL   1

const int baseSpeed = 190;
const int rightSpeed = 190;
const int leftSpeed = 190;

// --- Motor functions ---
void move_forward(int leftSpeed, int rightSpeed);
void Left(int leftSpeed, int rightSpeed);
void Right(int leftSpeed, int rightSpeed);
void stopMotors();

void setup() {
  Serial.begin(115200);

  pinMode(LEFT_IN1, OUTPUT);
  pinMode(LEFT_IN2, OUTPUT);
  pinMode(RIGHT_IN1, OUTPUT);
  pinMode(RIGHT_IN2, OUTPUT);

  for (int i = 0; i < NUM_SENSORS; i++) {
    pinMode(sensorPins[i], INPUT);
    sensorMin[i] = 4095;  // ESP32 ADC max
    sensorMax[i] = 0;
  }

  ledcSetup(LEFT_CHANNEL, 1000, 8);
  ledcAttachPin(LEFT_PWM_PIN, LEFT_CHANNEL);
  ledcSetup(RIGHT_CHANNEL, 1000, 8);
  ledcAttachPin(RIGHT_PWM_PIN, RIGHT_CHANNEL);

  // ---------------- AUTO CALIBRATION ----------------
  Serial.println("Calibrating sensors... Move robot left/right on line for 5s");
  unsigned long start = millis();
  while (millis() - start < 10000) { 
    for (int i = 0; i < NUM_SENSORS; i++) {
      int val = analogRead(sensorPins[i]);
      if (val < sensorMin[i]) sensorMin[i] = val;
      if (val > sensorMax[i]) sensorMax[i] = val;
    }
  }

  // Compute thresholds (midpoint between min & max)
  for (int i = 0; i < NUM_SENSORS; i++) {
    sensors_threshold[i] = (sensorMin[i] + sensorMax[i]) / 2;
    Serial.print("Sensor "); Serial.print(i);
    Serial.print(" Min="); Serial.print(sensorMin[i]);
    Serial.print(" Max="); Serial.print(sensorMax[i]);
    Serial.print(" Threshold="); Serial.println(sensors_threshold[i]);
  }
  Serial.println("Calibration complete!");
}

void loop() {
  // --- Read sensors into states[] ---
  for (int i = 0; i < NUM_SENSORS; i++) {
    int value = analogRead(sensorPins[i]);
    states[i] = (value >= sensors_threshold[i]); // true = black, false = white
  }

  // Aliases for readability
  bool L5 = states[0];
  bool L4 = states[1];
  bool L3 = states[2];
  bool L2 = states[3];
  bool L1 = states[4];
  bool M  = states[5];
  bool R1 = states[6];
  bool R2 = states[7];
  bool R3 = states[8];
  bool R4 = states[9];
  bool R5 = states[10];

  // ---- All White (00000000000) ----
  if(!L5 && !L4 && !L3 && !L2 && !L1 && !M && !R1 && !R2 && !R3 && !R4 && !R5){
    move_forward(170,170);
    Serial.println("All White - Forward");
  }

  // ---- All Black (11111111111) ----
  else if(L5 && L4 && L3 && L2 && L1 && M && R1 && R2 && R3 && R4 && R5){
    move_forward(170,170);
    Serial.println("All Black - Forward ");
  }

  //00011000000
  else if(!L5 && !L4 && !L3 && L2 && L1 && !M && !R1 && !R2 && !R3 && !R4 && !R5){
    Left(170,170);
    Serial.println("Forward - Center LM");
  }

  //00011100000
  else if(!L5 && !L4 && !L3 && L2 && L1 && M && !R1 && !R2 && !R3 && !R4 && !R5){
    move_forward(185,185);
    Serial.println("Forward - Center MR");
  }

  //00110000000
  else if(!L5 && !L4 && L3 && L2 && !L1 && !M && !R1 && !R2 && !R3 && !R4 && !R5){
    Left(185,185);
    Serial.println(" Left");
  }

  //01100000000
  else if(!L5 && L4 && L3 && !L2 && !L1 && !M && !R1 && !R2 && !R3 && !R4 && !R5){
    Left(190,190);
    Serial.println("Sharp Left");
  }

  //10000000000
  else if(L5 && !L4 && !L3 && !L2 && !L1 && !M && !R1 && !R2 && !R3 && !R4 && !R5){
    Left(190,190);
    Serial.println("Max Left");
  }

  //01000000000
  else if(!L5 && L4 && !L3 && !L2 && !L1 && !M && !R1 && !R2 && !R3 && !R4 && !R5){
    Left(180,190);
    Serial.println("Max Left");
  }

  //00100000000
  else if(!L5 && !L4 && L3 && !L2 && !L1 && !M && !R1 && !R2 && !R3 && !R4 && !R5){
    Left(170,170);
    Serial.println(" Left");
  }

  //00010000000
  else if(!L5 && !L4 && !L3 && L2 && !L1 && !M && !R1 && !R2 && !R3 && !R4 && !R5){
    Left(160,170);
    Serial.println(" Left");
  }

  //11000000000
  else if(L5 && L4 && !L3 && !L2 && !L1 && !M && !R1 && !R2 && !R3 && !R4 && !R5){
    Left(190,180);
    Serial.println(" Left");
  }

  //00000011000
  else if(!L5 && !L4 && !L3 && !L2 && !L1 && !M && R1 && R2 && !R3 && !R4 && !R5){
    Right(170,170);
    Serial.println(" Right");
  }

  //00000000001
  else if(!L5 && !L4 && !L3 && !L2 && !L1 && !M && !R1 && !R2 && !R3 && !R4 && R5){
    Right(190,190);
    Serial.println("Max Right");
  }

  //00111110000
  else if(!L5 && !L4 && L3 && L2 && L1 && M && R1 && !R2 && !R3 && !R4 && !R5){
    move_forward(190,190);
    Serial.println("Intersection / Cross");
  }

  //00011111000 (Wide Center)
  else if(!L5 && !L4 && !L3 && L2 && L1 && M && R1 && R2 && !R3 && !R4 && !R5){
    move_forward(170,170);
    Serial.println("Wide Center Forward");
  }

  //00001000000 (thin line)
  else if(!L5 && !L4 && !L3 && !L2 && L1 && !M && !R1 && !R2 && !R3 && !R4 && !R5){
    move_forward(190,190);
    Serial.println("Narrow Center Forward (thin line)");
  }

  //00011100000 (3 sensors center)
  else if(!L5 && !L4 && !L3 && L2 && L1 && M && !R1 && !R2 && !R3 && !R4 && !R5){
    move_forward(170,170);
    Serial.println("Narrow Center Forward (3 sensors)");
  }

  //00100010000 (broken line)
  //else if(!L5 && !L4 && L3 && !L2 && !L1 && !M && R1 && !R2 && !R3 && !R4 && !R5){
   // move_forward(170,170);
   // Serial.println("Broken Line Recovery");
 // }

  //00000100000
  else if(!L5 && !L4 && !L3 && !L2 && !L1 && M && !R1 && !R2 && !R3 && !R4 && !R5){
    move_forward(170,170);
    Serial.println("Forward");
  }

  //00000010000
  else if(!L5 && !L4 && !L3 && !L2 && !L1 && !M && R1 && !R2 && !R3 && !R4 && !R5){
    move_forward(170,160);
    Serial.println("Forward");
  }

  //00000110000
  else if(!L5 && !L4 && !L3 && !L2 && !L1 && M && R1 && !R2 && !R3 && !R4 && !R5){
    move_forward(170,160);
    Serial.println("Forward");
  }

  //00000001000
  else if(!L5 && !L4 && !L3 && !L2 && !L1 && !M && !R1 && R2 && !R3 && !R4 && !R5){
    Right(150,160);
    Serial.println("right");
  }

  //00000000100
  else if(!L5 && !L4 && !L3 && !L2 && !L1 && !M && !R1 && !R2 && R3 && !R4 && !R5){
    Right(170,160);
    Serial.println("right");
  }

  //00000000010
  else if(!L5 && !L4 && !L3 && !L2 && !L1 && !M && !R1 && !R2 && !R3 && R4 && !R5){
    Right(170,160);
    Serial.println("right");
  }

  //00000000110
  else if(!L5 && !L4 && !L3 && !L2 && !L1 && !M && !R1 && !R2 && R3 && R4 && !R5){
    Right(170,160);
    Serial.println("right");
  }

  //00000000011
  else if(!L5 && !L4 && !L3 && !L2 && !L1 && !M && !R1 && !R2 && !R3 && R4 && R5){
    Right(180,180);
    Serial.println("right");
  }
}

// ---- Motor functions ----
void Left(int leftSpeed, int rightSpeed){
  digitalWrite(LEFT_IN1, HIGH);
  digitalWrite(LEFT_IN2, LOW);
  digitalWrite(RIGHT_IN1, LOW);
  digitalWrite(RIGHT_IN2, HIGH);
  ledcWrite(LEFT_CHANNEL, leftSpeed);
  ledcWrite(RIGHT_CHANNEL, rightSpeed);
}

void Right(int leftSpeed, int rightSpeed){
  digitalWrite(LEFT_IN1, LOW);
  digitalWrite(LEFT_IN2, HIGH);
  digitalWrite(RIGHT_IN1, HIGH);
  digitalWrite(RIGHT_IN2, LOW);
  ledcWrite(LEFT_CHANNEL, leftSpeed);
  ledcWrite(RIGHT_CHANNEL, rightSpeed);
}

void move_forward(int leftSpeed, int rightSpeed){
  digitalWrite(LEFT_IN1, LOW);
  digitalWrite(LEFT_IN2, HIGH);
  digitalWrite(RIGHT_IN1, LOW);
  digitalWrite(RIGHT_IN2, HIGH);
  ledcWrite(LEFT_CHANNEL, leftSpeed);
  ledcWrite(RIGHT_CHANNEL, rightSpeed);
}

void stopMotors(){
  digitalWrite(LEFT_IN1, LOW);
  digitalWrite(LEFT_IN2, LOW);
  digitalWrite(RIGHT_IN1, LOW);
  digitalWrite(RIGHT_IN2, LOW);
  ledcWrite(LEFT_CHANNEL,0);
  ledcWrite(RIGHT_CHANNEL,0);
}
